;;;; ===========================================================================
;;;; Part 1: Bootstrap and Package Management
;;;; ===========================================================================

;; Set up package.el to install packages from MELPA
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
;; This ensures that use-package is installed and available
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

;;;; ===========================================================================
;;;; Part 2: Basic UI and Editor Behavior
;;;; ===========================================================================
(setq-default
 inhibit-startup-message t    ; Disable startup message
 indent-tabs-mode nil         ; Use spaces, not tabs
 tab-width 4                  ; Set tab width to 4 spaces
 c-basic-offset 4)

;; Disable UI elements for a cleaner look
(menu-bar-mode -1)

;; General editor enhancements
(column-number-mode t)          ; Show column number
(show-paren-mode 1)             ; Highlight matching parentheses
(blink-cursor-mode 0)           ; Stop cursor from blinking
(electric-indent-mode 0)        ; Disable automatic indentation on newline

;; Better scrolling behavior
(setq scroll-step 1
      scroll-margin 2
      scroll-conservatively 10000)

;; Disable backup files
(setq make-backup-files nil)

;; Default remote access method
(setq tramp-default-method "ssh")

;; Set clipboard behavior
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(add-hook 'prog-mode-hook
          (lambda ()
            (copilot-mode 1)
            (fci-mode 1)
            (setq-local indent-tabs-mode nil)
            (setq-local tab-width 4)
            (setq-local standard-indent 4)))

;; Start Emacs server for emacsclient
(setq server-socket-dir (format "/tmp/emacs%d" (user-uid)))
(server-start)

;;;; ===========================================================================
;;;; Part 3: Package Configurations using use-package
;;;; ===========================================================================

;; --- Theming ---
(use-package ample-theme
  :ensure t
  :config
  (load-theme 'ample t)) ; Load the ample theme on startup

;; --- General Utilities ---
(use-package avy
  :ensure t
  :bind ("M-]" . avy-goto-char))

(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))

;; Dependencies that other packages might need. Good to declare them explicitly.
(use-package dash :ensure t)
(use-package s :ensure t)
(use-package json-rpc :ensure t)

;; --- Language Server Protocol (LSP) and Autocompletion ---
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook ((go-mode . lsp-deferred)
         (rust-mode . lsp-deferred))
  :bind (:map lsp-mode-map
              ("C-c l r" . lsp-find-references)
              ("C-c l i" . lsp-find-implementation)))

(use-package company
  :ensure t
  :after lsp-mode
  :hook (after-init . global-company-mode)
  :config
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.2)
  ;; Use company-capf as the primary backend for LSP integration
  (setq company-backends '((company-capf company-dabbrev-code))))

(use-package company-quickhelp
  :ensure t
  :after company
  :config
  (company-quickhelp-mode 1))

;; --- Programming Languages & Tools ---
(use-package go-mode
  :ensure t
  :mode "\\.go\\'"
  :hook ((go-mode . lsp-deferred)
         (before-save . gofmt-before-save))
  :config
  (setq-local indent-tabs-mode t)
  (setq-local tab-width 4))

(use-package rust-mode
  :ensure t
  :hook (rust-mode . lsp-deferred)
  :config
  (setq rust-format-on-save t))

(use-package vterm
  :ensure t
  :bind ("M-e" . vterm))

(use-package xcscope
  :ensure t
  :config
  (require 'cscope)
  (cscope-setup)
  :bind (:map cscope-minor-mode-map ; Use a prefix for cscope keys
              ("C-c s s" . cscope-find-this-symbol)
              ("C-c s d" . cscope-find-global-definition)
              ("C-c s c" . cscope-find-functions-calling-this-function)
              ("C-c s p" . cscope-history-backward-line)
              ("C-c s n" . cscope-history-forward-line)))

(use-package fill-column-indicator
  :ensure t
  :hook (after-change-major-mode . fci-mode)
  :bind ("M-i" . fci-mode)
  :config
  (setq fci-rule-column 79)
  (setq fci-rule-width 2))

;; --- AI Assistants ---
(use-package chatgpt-shell
  :ensure t
  :config
  (setq chatgpt-shell-openai-key
        (auth-source-pick-first-password :host "api.openai.com"))
  (setq chatgpt-shell-anthropic-key
        (auth-source-pick-first-password :host "api.anthropic.com"))
  (setq chatgpt-shell-google-key
        (auth-source-pick-first-password :host "generativelanguage.googleapis.com"))
  :bind (("C-c e" . chatgpt-shell-prompt-compose)
         ("C-c i" . chatgpt-shell-quick-insert)))

(use-package copilot
  :ensure t
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("M-TAB" . 'copilot-accept-completion-by-word)))

;; --- File Navigation (zoxide) ---
;; NOTE: zoxide.el is not on MELPA, so you still need to load it manually.
;; Ensure the file ~/.emacs.d/zoxide.el exists.
(load-file "~/.emacs.d/zoxide.el")
(global-set-key (kbd "C-c o") 'zoxide-query)
(global-set-key (kbd "C-c j") 'zoxide-find-file-with-query)

;;;; ===========================================================================
;;;; Part 4: Global Keybindings and Custom Functions
;;;; ===========================================================================
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-j") 'newline-and-indent)

;;;; ===========================================================================
;;;; End of configuration. Tell Emacs we are done.
;;;; ===========================================================================
(provide 'init)
;;; init.el ends here
